import OpenAI from "openai";
import fs from "fs";
import axios from "axios";
import { join } from "path";
import { tmpdir } from "os";
import Ffmpeg from "fluent-ffmpeg";
import { saveAndReply } from "./api/methods.js";
import { getContext } from "./db/database.js";

const openai = new OpenAI({
  baseURL: "https://api.deepseek.com",
  apiKey: "sk-1bb794f2729c479fb0dae57308be81f3",
});

const extractUserFacts = (args) => {
  console.log(args);
  return { success: true, facts: args.facts, response: args.response };
};

export const getAiResponse = async (text, context) => {
  let systemMessage =
    `–¢—ã –¥–µ–≤—É—à–∫–∞-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ. –ù–µ –æ—Ç–≤–µ—á–∞–π –¥–ª–∏–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —Å–ª–æ–∂–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. ` +
    `–ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –¥—Ä—É–≥ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ. –í–û–ó–í–†–ê–©–ê–ô –û–¢–í–ï–¢ –í –§–û–†–ú–ê–¢–ï JSON:
    {
      "response": "—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞",
      "mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
      "should_voice": true/false,
      "reaction": "–∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è"
      "type_of_message": "photo"/"text"/"voice"
    }`;

  const tools = [
    {
      type: "function",
      function: {
        name: "extractUserFacts",
        description:
          "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–∏–º—ã—Ö –¥–µ–ª, –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        parameters: {
          type: "object",
          properties: {
            facts: {
              type: "string",
              description:
                "–°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ö–∞–∂–¥—ã–π —Ñ–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Ç–∏–ø: –∑–Ω–∞—á–µ–Ω–∏–µ', –Ω–∞–ø—Ä–∏–º–µ—Ä, '–∏–º—è: –ê–Ω–¥—Ä–µ–π' –∏–ª–∏ '—Ö–æ–±–±–∏: —Ñ—É—Ç–±–æ–ª'.",
              items: { type: "string" },
            },
            response: {
              type: "object",
              description: `–ó–¥–µ—Å—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {
                "response": "—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞",
                "mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                "should_voice": true/false,
                "reaction": "–∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è"
              }`,
              items: { type: "string" },
            },
          },
          required: ["facts", "response"],
        },
      },
    },
  ];
  console.log(context)
  try {
    const response = await openai.chat.completions.create({
      messages: [
        { role: "system", content: systemMessage },
        ...context,
        { role: "user", content: text },
      ],
      tools: tools,
      tool_choice: "auto", // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      model: "deepseek-chat",
      temperature: 0.7, // –£–º–µ–Ω—å—à–∏–ª —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    });
    const choice = response.choices[0];
    const message = choice.message;

    if (message.tool_calls && message.tool_calls.length > 0) {
      for (const toolCall of message.tool_calls) {
        if (toolCall.function.name === "extractUserFacts") {
          try {
            const args = JSON.parse(toolCall.function.arguments);
            const result = extractUserFacts(args);
            return result.response.response;
          } catch (error) {
            console.error("Error parsing function arguments:", error);
          }
        }
      }
    }
    if (message.content) {
      try {
        const parsedResponse = JSON.parse(message.content);
        return parsedResponse.response;
      } catch (e) {
        console.log("AI Response:", message.content);
        return message.content;
      }
    } else {
      return "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...";
    }
  } catch (error) {
    console.error("Error in getAiResponse:", error);
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòî";
  }
};

export const sendVoiceMessage = async (ctx, data) => {
  // const tts = await axios.post("https://spicy-pets-hope.loca.lt/predict", {
  //   text: data.replace(/[^\w\s–∞-—è–ê-–Ø—ë–Å.,!?;:()'"-]/gu, ""),
  //   speaker: "pinigin_44",
  // });
  // const audioBuffer = Buffer.from(tts.data.output, "base64");

  // // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
  // const tempWavPath = join(tmpdir(), `temp_${Date.now()}.wav`);
  // const tempOggPath = join(tmpdir(), `temp_${Date.now()}.ogg`);

  try {
    //   // –°–æ—Ö—Ä–∞–Ω—è–µ–º WAV —Ñ–∞–π–ª
    //   fs.writeFileSync(tempWavPath, audioBuffer);

    //   // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG
    //   await new Promise((resolve, reject) => {
    //     Ffmpeg(tempWavPath)
    //       .audioCodec("libopus")
    //       .audioBitrate("64k")
    //       .format("ogg")
    //       .on("error", reject)
    //       .on("end", resolve)
    //       .save(tempOggPath);
    //   });

    //   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    //   await ctx.sendVoice({ source: fs.createReadStream(tempOggPath) });
    await saveAndReply(ctx, "–≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n" + data);
  } catch (error) {
    console.error("Error:", error);
  } finally {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    try {
      fs.unlinkSync(tempWavPath);
    } catch {}
    try {
      fs.unlinkSync(tempOggPath);
    } catch {}
  }
};
